

version: '3.9'

volumes:
 certs:
   driver: local
 esdata01:
   driver: local
 kibanadata:
   driver: local
 metricbeatdata01:
   driver: local
 filebeatdata01:
   driver: local
 logstashdata01:
   driver: local

networks:
  infra:
    name: astropong

services:

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx:sa
    container_name: nginx
    ports:
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - infra
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "https://localhost:443"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  frontend:
    build: 
      context: ../frontend
      dockerfile: Dockerfile
    image: frontend:sa
    container_name: frontend
    volumes:
      - ../frontend/app:/app
      - /app/node_modules
    expose:
      - "5173"
    depends_on:
      - backend
    networks:
      - infra
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    image: backend:sa
    container_name: backend
    volumes:
      - ../backend/app:/app
    expose:
      - "8000"
    depends_on:
      - database
    env_file:
      - .env
    networks:
      - infra
    healthcheck:
      test: ["CMD-SHELL", "python manage.py check || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: database:sa
    container_name: ${POSTGRES_HOST}
    volumes:
      - ./database/data:/var/lib/postgresql/data
    expose:
      - "5432"
    env_file:
      - .env
    networks:
      - infra
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
  
  elk_setup:
    build:
      context: ./elk_setup
      dockerfile: Dockerfile
    image: elk_setup:sa
    container_name: elk_setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    container_name: elasticsearch
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
      # - ./elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    expose:
      - "9200"
      - "9300"
    # env_file:
    #   - .env
    environment:
      # - node.name=elasticsearch
      # - cluster.name=elasticsearch_cluster
      - discovery.type=single-node
      - xpack.security.enabled=false
      # - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - infra
    restart: always

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.0
    container_name: logstash
    volumes:
      - ./logstash/conf/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/conf/logstash.yml:/usr/share/logstash/config/logstash.yml
      # - ./logstash/data:/usr/share/logstash/data
    depends_on:
      - elasticsearch
    expose:
      - "5000"
      - "9600"
    # env_file:
    #   - .env
    environment:
      - xpack.monitoring.enabled=false
    networks:
      - infra
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.0
    container_name: kibana
    # volumes:
      # - ./kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    # env_file:
    #   - .env
    environment:
      # - node.name=kibana
      # - cluster.name=elasticsearch_cluster
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - infra
    restart: always

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.26
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./filebeat/data:/usr/share/filebeat/data
    environment:
      - LOGSTASH_HOST=logstash:5044
    networks:
      - infra
    depends_on:
      - logstash
    restart: always